name: build

on: push

jobs:

  pipeline:
    name: Pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.18.0"
      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: v1.45.12

          # Optional: golangci-lint command line arguments.
          #args: --issues-exit-code=0

          # Save report output so that Sonar picks it up
          #args: --out-format checkstyle > golint-report.out

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
          # skip-build-cache: true
      - name: Test
        run: make test
      - name: Test Build
        run: go build main.go
      - name: Test Invocation
        run: ./main --version
      - name: Test Build Cleanup
        run: rm main
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
          SCOOP_BUCKET_GITHUB_TOKEN: ${{ secrets.SCOOP_BUCKET_GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}


      - name: Read Version
        run: |
          VERSION=$(cat package.json | jq -r '.version')
          echo '::set-output name=VERSION::$VERSION'
        id: debug-version
      - name: Debug Version
        run: |
          echo 'VERSION: ${{ steps.debug-version.outputs.VERSION }}'
